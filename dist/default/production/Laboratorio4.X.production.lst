

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri May 12 14:32:50 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og9 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    24   000000                     
    25                           ; Version 2.40
    26                           ; Generated 04/07/2022 GMT
    27                           ; 
    28                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution. Publication is not required when
    42                           ;        this file is used in an embedded application.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F4550 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60   000000                     
    61                           	psect	idataCOMRAM
    62   007D49                     __pidataCOMRAM:
    63                           	callstack 0
    64                           
    65                           ;initializer for _interfaz
    66   007D49  08                 	db	8
    67   000000                     _LATE1	set	31849
    68   000000                     _LATD	set	3980
    69   000000                     _TRISD	set	3989
    70   000000                     _ADCON1	set	4033
    71   000000                     _LATE0	set	31848
    72   000000                     _TRISE	set	3990
    73                           
    74                           ; #config settings
    75                           
    76                           	psect	cinit
    77   007DA0                     __pcinit:
    78                           	callstack 0
    79   007DA0                     start_initialization:
    80                           	callstack 0
    81   007DA0                     __initialization:
    82                           	callstack 0
    83                           
    84                           ; Initialize objects allocated to COMRAM (1 bytes)
    85                           ; load TBLPTR registers with __pidataCOMRAM
    86   007DA0  0E49               	movlw	low __pidataCOMRAM
    87   007DA2  6EF6               	movwf	tblptrl,c
    88   007DA4  0E7D               	movlw	high __pidataCOMRAM
    89   007DA6  6EF7               	movwf	tblptrh,c
    90   007DA8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    91   007DAA  6EF8               	movwf	tblptru,c
    92   007DAC  0009               	tblrd		*+	;fetch initializer
    93   007DAE  CFF5 F00E          	movff	tablat,__pdataCOMRAM
    94   007DB2                     end_of_initialization:
    95                           	callstack 0
    96   007DB2                     __end_of__initialization:
    97                           	callstack 0
    98   007DB2  0E00               	movlw	low (__Lmediumconst shr (0+16))
    99   007DB4  6EF8               	movwf	tblptru,c
   100   007DB6  0100               	movlb	0
   101   007DB8  EF5C  F03F         	goto	_main	;jump to C main() function
   102                           
   103                           	psect	dataCOMRAM
   104   00000E                     __pdataCOMRAM:
   105                           	callstack 0
   106   00000E                     _interfaz:
   107                           	callstack 0
   108   00000E                     	ds	1
   109                           
   110                           	psect	cstackCOMRAM
   111   000001                     __pcstackCOMRAM:
   112                           	callstack 0
   113   000001                     ??_RetardoLCD:
   114   000001                     ___lbmod@divisor:
   115                           	callstack 0
   116                           
   117                           ; 1 bytes @ 0x0
   118   000001                     	ds	1
   119   000002                     RetardoLCD@a:
   120                           	callstack 0
   121   000002                     ___lbmod@dividend:
   122                           	callstack 0
   123                           
   124                           ; 1 bytes @ 0x1
   125   000002                     	ds	1
   126   000003                     EnviaDato@a:
   127                           	callstack 0
   128   000003                     ___lbmod@counter:
   129                           	callstack 0
   130                           
   131                           ; 1 bytes @ 0x2
   132   000003                     	ds	1
   133   000004                     EscribeLCD_c@a:
   134                           	callstack 0
   135   000004                     DireccionaLCD@a:
   136                           	callstack 0
   137   000004                     ___lbmod@rem:
   138                           	callstack 0
   139                           
   140                           ; 1 bytes @ 0x3
   141   000004                     	ds	1
   142   000005                     ___lbdiv@divisor:
   143                           	callstack 0
   144                           
   145                           ; 1 bytes @ 0x4
   146   000005                     	ds	1
   147   000006                     ___lbdiv@dividend:
   148                           	callstack 0
   149                           
   150                           ; 1 bytes @ 0x5
   151   000006                     	ds	1
   152   000007                     ___lbdiv@counter:
   153                           	callstack 0
   154                           
   155                           ; 1 bytes @ 0x6
   156   000007                     	ds	1
   157   000008                     ___lbdiv@quotient:
   158                           	callstack 0
   159                           
   160                           ; 1 bytes @ 0x7
   161   000008                     	ds	1
   162   000009                     EscribeLCD_n8@b:
   163                           	callstack 0
   164                           
   165                           ; 1 bytes @ 0x8
   166   000009                     	ds	1
   167   00000A                     EscribeLCD_n8@centena:
   168                           	callstack 0
   169                           
   170                           ; 1 bytes @ 0x9
   171   00000A                     	ds	1
   172   00000B                     EscribeLCD_n8@decena:
   173                           	callstack 0
   174                           
   175                           ; 1 bytes @ 0xA
   176   00000B                     	ds	1
   177   00000C                     EscribeLCD_n8@unidad:
   178                           	callstack 0
   179                           
   180                           ; 1 bytes @ 0xB
   181   00000C                     	ds	1
   182   00000D                     EscribeLCD_n8@a:
   183                           	callstack 0
   184                           
   185                           ; 1 bytes @ 0xC
   186   00000D                     	ds	1
   187   00000E                     
   188                           ; 1 bytes @ 0xD
   189 ;;
   190 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   191 ;;
   192 ;; *************** function _main *****************
   193 ;; Defined at:
   194 ;;		line 7 in file "Laboratorio4.c"
   195 ;; Parameters:    Size  Location     Type
   196 ;;		None
   197 ;; Auto vars:     Size  Location     Type
   198 ;;		None
   199 ;; Return value:  Size  Location     Type
   200 ;;                  1    wreg      void 
   201 ;; Registers used:
   202 ;;		wreg, status,2, status,0, cstack
   203 ;; Tracked objects:
   204 ;;		On entry : 0/0
   205 ;;		On exit  : 0/0
   206 ;;		Unchanged: 0/0
   207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   208 ;;      Params:         0       0       0       0       0       0       0       0       0
   209 ;;      Locals:         0       0       0       0       0       0       0       0       0
   210 ;;      Temps:          0       0       0       0       0       0       0       0       0
   211 ;;      Totals:         0       0       0       0       0       0       0       0       0
   212 ;;Total ram usage:        0 bytes
   213 ;; Hardware stack levels required when called: 4
   214 ;; This function calls:
   215 ;;		_BorraLCD
   216 ;;		_DireccionaLCD
   217 ;;		_EscribeLCD_c
   218 ;;		_EscribeLCD_n8
   219 ;;		_InicializaLCD
   220 ;; This function is called by:
   221 ;;		Startup code after reset
   222 ;; This function uses a non-reentrant model
   223 ;;
   224                           
   225                           	psect	text0
   226   007EB8                     __ptext0:
   227                           	callstack 0
   228   007EB8                     _main:
   229                           	callstack 27
   230                           
   231                           ;Laboratorio4.c: 8: ADCON1=15;
   232                           
   233                           ;incstack = 0
   234   007EB8  0E0F               	movlw	15
   235   007EBA  6EC1               	movwf	193,c	;volatile
   236                           
   237                           ;Laboratorio4.c: 10: TRISD=0;
   238   007EBC  0E00               	movlw	0
   239   007EBE  6E95               	movwf	149,c	;volatile
   240                           
   241                           ;Laboratorio4.c: 12: TRISE=0;
   242   007EC0  0E00               	movlw	0
   243   007EC2  6E96               	movwf	150,c	;volatile
   244                           
   245                           ;Laboratorio4.c: 14: InicializaLCD();
   246   007EC4  EC10  F03F         	call	_InicializaLCD	;wreg free
   247                           
   248                           ;Laboratorio4.c: 16: BorraLCD();
   249   007EC8  ECB0  F03E         	call	_BorraLCD	;wreg free
   250                           
   251                           ;Laboratorio4.c: 18: EscribeLCD_c('H');
   252   007ECC  0E48               	movlw	72
   253   007ECE  ECC5  F03E         	call	_EscribeLCD_c
   254                           
   255                           ;Laboratorio4.c: 19: EscribeLCD_c('o');
   256   007ED2  0E6F               	movlw	111
   257   007ED4  ECC5  F03E         	call	_EscribeLCD_c
   258                           
   259                           ;Laboratorio4.c: 20: EscribeLCD_c('l');
   260   007ED8  0E6C               	movlw	108
   261   007EDA  ECC5  F03E         	call	_EscribeLCD_c
   262                           
   263                           ;Laboratorio4.c: 21: EscribeLCD_c('a');
   264   007EDE  0E61               	movlw	97
   265   007EE0  ECC5  F03E         	call	_EscribeLCD_c
   266                           
   267                           ;Laboratorio4.c: 22: EscribeLCD_c(' ');
   268   007EE4  0E20               	movlw	32
   269   007EE6  ECC5  F03E         	call	_EscribeLCD_c
   270                           
   271                           ;Laboratorio4.c: 23: EscribeLCD_c('m');
   272   007EEA  0E6D               	movlw	109
   273   007EEC  ECC5  F03E         	call	_EscribeLCD_c
   274                           
   275                           ;Laboratorio4.c: 24: EscribeLCD_c('u');
   276   007EF0  0E75               	movlw	117
   277   007EF2  ECC5  F03E         	call	_EscribeLCD_c
   278                           
   279                           ;Laboratorio4.c: 25: EscribeLCD_c('n');
   280   007EF6  0E6E               	movlw	110
   281   007EF8  ECC5  F03E         	call	_EscribeLCD_c
   282                           
   283                           ;Laboratorio4.c: 26: EscribeLCD_c('d');
   284   007EFC  0E64               	movlw	100
   285   007EFE  ECC5  F03E         	call	_EscribeLCD_c
   286                           
   287                           ;Laboratorio4.c: 27: EscribeLCD_c('o');
   288   007F02  0E6F               	movlw	111
   289   007F04  ECC5  F03E         	call	_EscribeLCD_c
   290                           
   291                           ;Laboratorio4.c: 28: DireccionaLCD(0xC0);
   292   007F08  0EC0               	movlw	192
   293   007F0A  ECBA  F03E         	call	_DireccionaLCD
   294                           
   295                           ;Laboratorio4.c: 29: EscribeLCD_n8(7,1);
   296   007F0E  0E01               	movlw	1
   297   007F10  6E09               	movwf	EscribeLCD_n8@b^0,c
   298   007F12  0E07               	movlw	7
   299   007F14  EC8D  F03F         	call	_EscribeLCD_n8
   300   007F18                     l122:
   301   007F18  D7FF               	goto	l122
   302   007F1A                     __end_of_main:
   303                           	callstack 0
   304                           
   305 ;; *************** function _InicializaLCD *****************
   306 ;; Defined at:
   307 ;;		line 71 in file "LibLCDXC8.h"
   308 ;; Parameters:    Size  Location     Type
   309 ;;		None
   310 ;; Auto vars:     Size  Location     Type
   311 ;;		None
   312 ;; Return value:  Size  Location     Type
   313 ;;                  1    wreg      void 
   314 ;; Registers used:
   315 ;;		wreg, status,2, status,0, cstack
   316 ;; Tracked objects:
   317 ;;		On entry : 0/0
   318 ;;		On exit  : 0/0
   319 ;;		Unchanged: 0/0
   320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   321 ;;      Params:         0       0       0       0       0       0       0       0       0
   322 ;;      Locals:         0       0       0       0       0       0       0       0       0
   323 ;;      Temps:          0       0       0       0       0       0       0       0       0
   324 ;;      Totals:         0       0       0       0       0       0       0       0       0
   325 ;;Total ram usage:        0 bytes
   326 ;; Hardware stack levels used: 1
   327 ;; Hardware stack levels required when called: 3
   328 ;; This function calls:
   329 ;;		_BorraLCD
   330 ;;		_EnviaDato
   331 ;;		_HabilitaLCD
   332 ;;		_RetardoLCD
   333 ;; This function is called by:
   334 ;;		_main
   335 ;; This function uses a non-reentrant model
   336 ;;
   337                           
   338                           	psect	text1
   339   007E20                     __ptext1:
   340                           	callstack 0
   341   007E20                     _InicializaLCD:
   342                           	callstack 27
   343                           
   344                           ;LibLCDXC8.h: 73: LATE0=0;
   345                           
   346                           ;incstack = 0
   347   007E20  908D               	bcf	3981,0,c	;volatile
   348                           
   349                           ;LibLCDXC8.h: 76: else;LibLCDXC8.h: 77: LATD=0x3F;
   350                           
   351                           ;LibLCDXC8.h: 74: if(interfaz==4)
   352   007E22  0E3F               	movlw	63
   353   007E24  6E8C               	movwf	140,c	;volatile
   354                           
   355                           ;LibLCDXC8.h: 78: HabilitaLCD();
   356   007E26  ECA9  F03E         	call	_HabilitaLCD	;wreg free
   357                           
   358                           ;LibLCDXC8.h: 79: RetardoLCD(1);
   359   007E2A  0E01               	movlw	1
   360   007E2C  EC31  F03F         	call	_RetardoLCD
   361                           
   362                           ;LibLCDXC8.h: 82: else;LibLCDXC8.h: 83: LATD=0x3F;
   363                           
   364                           ;LibLCDXC8.h: 80: if(interfaz==4)
   365   007E30  0E3F               	movlw	63
   366   007E32  6E8C               	movwf	140,c	;volatile
   367                           
   368                           ;LibLCDXC8.h: 84: HabilitaLCD();
   369   007E34  ECA9  F03E         	call	_HabilitaLCD	;wreg free
   370                           
   371                           ;LibLCDXC8.h: 85: RetardoLCD(3);
   372   007E38  0E03               	movlw	3
   373   007E3A  EC31  F03F         	call	_RetardoLCD
   374                           
   375                           ;LibLCDXC8.h: 88: else;LibLCDXC8.h: 89: LATD=0x3F;
   376                           
   377                           ;LibLCDXC8.h: 86: if(interfaz==4)
   378   007E3E  0E3F               	movlw	63
   379   007E40  6E8C               	movwf	140,c	;volatile
   380                           
   381                           ;LibLCDXC8.h: 90: HabilitaLCD();
   382   007E42  ECA9  F03E         	call	_HabilitaLCD	;wreg free
   383                           
   384                           ;LibLCDXC8.h: 91: RetardoLCD(4);
   385   007E46  0E04               	movlw	4
   386   007E48  EC31  F03F         	call	_RetardoLCD
   387                           
   388                           ;LibLCDXC8.h: 99: };LibLCDXC8.h: 100: BorraLCD();
   389                           
   390                           ;LibLCDXC8.h: 92: if(interfaz==4){
   391   007E4C  ECB0  F03E         	call	_BorraLCD	;wreg free
   392                           
   393                           ;LibLCDXC8.h: 101: EnviaDato(0xF);
   394   007E50  0E0F               	movlw	15
   395   007E52  ECA5  F03E         	call	_EnviaDato
   396                           
   397                           ;LibLCDXC8.h: 102: HabilitaLCD();
   398   007E56  ECA9  F03E         	call	_HabilitaLCD	;wreg free
   399                           
   400                           ;LibLCDXC8.h: 103: RetardoLCD(4);
   401   007E5A  0E04               	movlw	4
   402   007E5C  EC31  F03F         	call	_RetardoLCD
   403   007E60  0012               	return		;funcret
   404   007E62                     __end_of_InicializaLCD:
   405                           	callstack 0
   406                           
   407 ;; *************** function _BorraLCD *****************
   408 ;; Defined at:
   409 ;;		line 112 in file "LibLCDXC8.h"
   410 ;; Parameters:    Size  Location     Type
   411 ;;		None
   412 ;; Auto vars:     Size  Location     Type
   413 ;;		None
   414 ;; Return value:  Size  Location     Type
   415 ;;                  1    wreg      void 
   416 ;; Registers used:
   417 ;;		wreg, status,2, status,0, cstack
   418 ;; Tracked objects:
   419 ;;		On entry : 0/0
   420 ;;		On exit  : 0/0
   421 ;;		Unchanged: 0/0
   422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   423 ;;      Params:         0       0       0       0       0       0       0       0       0
   424 ;;      Locals:         0       0       0       0       0       0       0       0       0
   425 ;;      Temps:          0       0       0       0       0       0       0       0       0
   426 ;;      Totals:         0       0       0       0       0       0       0       0       0
   427 ;;Total ram usage:        0 bytes
   428 ;; Hardware stack levels used: 1
   429 ;; Hardware stack levels required when called: 2
   430 ;; This function calls:
   431 ;;		_EnviaDato
   432 ;;		_HabilitaLCD
   433 ;;		_RetardoLCD
   434 ;; This function is called by:
   435 ;;		_InicializaLCD
   436 ;;		_main
   437 ;; This function uses a non-reentrant model
   438 ;;
   439                           
   440                           	psect	text2
   441   007D60                     __ptext2:
   442                           	callstack 0
   443   007D60                     _BorraLCD:
   444                           	callstack 27
   445                           
   446                           ;LibLCDXC8.h: 114: LATE0=0;
   447                           
   448                           ;incstack = 0
   449   007D60  908D               	bcf	3981,0,c	;volatile
   450                           
   451                           ;LibLCDXC8.h: 115: EnviaDato(0x01);
   452   007D62  0E01               	movlw	1
   453   007D64  ECA5  F03E         	call	_EnviaDato
   454                           
   455                           ;LibLCDXC8.h: 116: HabilitaLCD();
   456   007D68  ECA9  F03E         	call	_HabilitaLCD	;wreg free
   457                           
   458                           ;LibLCDXC8.h: 117: RetardoLCD(2);
   459   007D6C  0E02               	movlw	2
   460   007D6E  EC31  F03F         	call	_RetardoLCD
   461   007D72  0012               	return		;funcret
   462   007D74                     __end_of_BorraLCD:
   463                           	callstack 0
   464                           
   465 ;; *************** function _EscribeLCD_n8 *****************
   466 ;; Defined at:
   467 ;;		line 145 in file "LibLCDXC8.h"
   468 ;; Parameters:    Size  Location     Type
   469 ;;  a               1    wreg     unsigned char 
   470 ;;  b               1    8[COMRAM] unsigned char 
   471 ;; Auto vars:     Size  Location     Type
   472 ;;  a               1   12[COMRAM] unsigned char 
   473 ;;  unidad          1   11[COMRAM] unsigned char 
   474 ;;  decena          1   10[COMRAM] unsigned char 
   475 ;;  centena         1    9[COMRAM] unsigned char 
   476 ;; Return value:  Size  Location     Type
   477 ;;                  1    wreg      void 
   478 ;; Registers used:
   479 ;;		wreg, status,2, status,0, cstack
   480 ;; Tracked objects:
   481 ;;		On entry : 0/0
   482 ;;		On exit  : 0/0
   483 ;;		Unchanged: 0/0
   484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   485 ;;      Params:         1       0       0       0       0       0       0       0       0
   486 ;;      Locals:         4       0       0       0       0       0       0       0       0
   487 ;;      Temps:          0       0       0       0       0       0       0       0       0
   488 ;;      Totals:         5       0       0       0       0       0       0       0       0
   489 ;;Total ram usage:        5 bytes
   490 ;; Hardware stack levels used: 1
   491 ;; Hardware stack levels required when called: 2
   492 ;; This function calls:
   493 ;;		_EnviaDato
   494 ;;		_HabilitaLCD
   495 ;;		_RetardoLCD
   496 ;;		___lbdiv
   497 ;;		___lbmod
   498 ;; This function is called by:
   499 ;;		_main
   500 ;; This function uses a non-reentrant model
   501 ;;
   502                           
   503                           	psect	text3
   504   007F1A                     __ptext3:
   505                           	callstack 0
   506   007F1A                     _EscribeLCD_n8:
   507                           	callstack 28
   508                           
   509                           ;incstack = 0
   510                           ;EscribeLCD_n8@a stored from wreg
   511   007F1A  6E0D               	movwf	EscribeLCD_n8@a^0,c
   512                           
   513                           ;LibLCDXC8.h: 150: unsigned char centena,decena,unidad;;LibLCDXC8.h: 151: LATE0=1;
   514   007F1C  808D               	bsf	3981,0,c	;volatile
   515                           
   516                           ;LibLCDXC8.h: 152: switch(b){
   517   007F1E  D065               	goto	l1155
   518   007F20                     l1123:
   519   007F20  0E0A               	movlw	10
   520   007F22  6E01               	movwf	___lbmod@divisor^0,c
   521   007F24  500D               	movf	EscribeLCD_n8@a^0,w,c
   522   007F26  ECDE  F03E         	call	___lbmod
   523   007F2A  6E0C               	movwf	EscribeLCD_n8@unidad^0,c
   524                           
   525                           ;LibLCDXC8.h: 154: EnviaDato(unidad+48);
   526   007F2C  500C               	movf	EscribeLCD_n8@unidad^0,w,c
   527   007F2E  0F30               	addlw	48
   528   007F30  ECA5  F03E         	call	_EnviaDato
   529                           
   530                           ;LibLCDXC8.h: 155: HabilitaLCD();
   531   007F34  ECA9  F03E         	call	_HabilitaLCD	;wreg free
   532                           
   533                           ;LibLCDXC8.h: 156: RetardoLCD(4);
   534   007F38  0E04               	movlw	4
   535   007F3A  EC31  F03F         	call	_RetardoLCD
   536                           
   537                           ;LibLCDXC8.h: 157: break;
   538   007F3E  0012               	return	
   539   007F40                     l1129:
   540   007F40  0E0A               	movlw	10
   541   007F42  6E05               	movwf	___lbdiv@divisor^0,c
   542   007F44  0E64               	movlw	100
   543   007F46  6E01               	movwf	___lbmod@divisor^0,c
   544   007F48  500D               	movf	EscribeLCD_n8@a^0,w,c
   545   007F4A  ECDE  F03E         	call	___lbmod
   546   007F4E  ECF3  F03E         	call	___lbdiv
   547   007F52  6E0B               	movwf	EscribeLCD_n8@decena^0,c
   548                           
   549                           ;LibLCDXC8.h: 159: unidad=a%10;
   550   007F54  0E0A               	movlw	10
   551   007F56  6E01               	movwf	___lbmod@divisor^0,c
   552   007F58  500D               	movf	EscribeLCD_n8@a^0,w,c
   553   007F5A  ECDE  F03E         	call	___lbmod
   554   007F5E  6E0C               	movwf	EscribeLCD_n8@unidad^0,c
   555                           
   556                           ;LibLCDXC8.h: 160: EnviaDato(decena+48);
   557   007F60  500B               	movf	EscribeLCD_n8@decena^0,w,c
   558   007F62  0F30               	addlw	48
   559   007F64  ECA5  F03E         	call	_EnviaDato
   560                           
   561                           ;LibLCDXC8.h: 161: HabilitaLCD();
   562   007F68  ECA9  F03E         	call	_HabilitaLCD	;wreg free
   563                           
   564                           ;LibLCDXC8.h: 162: RetardoLCD(4);
   565   007F6C  0E04               	movlw	4
   566   007F6E  EC31  F03F         	call	_RetardoLCD
   567                           
   568                           ;LibLCDXC8.h: 163: EnviaDato(unidad+48);
   569   007F72  500C               	movf	EscribeLCD_n8@unidad^0,w,c
   570   007F74  0F30               	addlw	48
   571   007F76  ECA5  F03E         	call	_EnviaDato
   572                           
   573                           ;LibLCDXC8.h: 164: HabilitaLCD();
   574   007F7A  ECA9  F03E         	call	_HabilitaLCD	;wreg free
   575                           
   576                           ;LibLCDXC8.h: 165: RetardoLCD(4);
   577   007F7E  0E04               	movlw	4
   578   007F80  EC31  F03F         	call	_RetardoLCD
   579                           
   580                           ;LibLCDXC8.h: 166: break;
   581   007F84  0012               	return	
   582   007F86                     l1139:
   583   007F86  0E64               	movlw	100
   584   007F88  6E05               	movwf	___lbdiv@divisor^0,c
   585   007F8A  500D               	movf	EscribeLCD_n8@a^0,w,c
   586   007F8C  ECF3  F03E         	call	___lbdiv
   587   007F90  6E0A               	movwf	EscribeLCD_n8@centena^0,c
   588                           
   589                           ;LibLCDXC8.h: 168: decena=(a%100)/10;
   590   007F92  0E0A               	movlw	10
   591   007F94  6E05               	movwf	___lbdiv@divisor^0,c
   592   007F96  0E64               	movlw	100
   593   007F98  6E01               	movwf	___lbmod@divisor^0,c
   594   007F9A  500D               	movf	EscribeLCD_n8@a^0,w,c
   595   007F9C  ECDE  F03E         	call	___lbmod
   596   007FA0  ECF3  F03E         	call	___lbdiv
   597   007FA4  6E0B               	movwf	EscribeLCD_n8@decena^0,c
   598                           
   599                           ;LibLCDXC8.h: 169: unidad=a%10;
   600   007FA6  0E0A               	movlw	10
   601   007FA8  6E01               	movwf	___lbmod@divisor^0,c
   602   007FAA  500D               	movf	EscribeLCD_n8@a^0,w,c
   603   007FAC  ECDE  F03E         	call	___lbmod
   604   007FB0  6E0C               	movwf	EscribeLCD_n8@unidad^0,c
   605                           
   606                           ;LibLCDXC8.h: 170: EnviaDato(centena+48);
   607   007FB2  500A               	movf	EscribeLCD_n8@centena^0,w,c
   608   007FB4  0F30               	addlw	48
   609   007FB6  ECA5  F03E         	call	_EnviaDato
   610                           
   611                           ;LibLCDXC8.h: 171: HabilitaLCD();
   612   007FBA  ECA9  F03E         	call	_HabilitaLCD	;wreg free
   613                           
   614                           ;LibLCDXC8.h: 172: RetardoLCD(4);
   615   007FBE  0E04               	movlw	4
   616   007FC0  EC31  F03F         	call	_RetardoLCD
   617                           
   618                           ;LibLCDXC8.h: 173: EnviaDato(decena+48);
   619   007FC4  500B               	movf	EscribeLCD_n8@decena^0,w,c
   620   007FC6  0F30               	addlw	48
   621   007FC8  ECA5  F03E         	call	_EnviaDato
   622                           
   623                           ;LibLCDXC8.h: 174: HabilitaLCD();
   624   007FCC  ECA9  F03E         	call	_HabilitaLCD	;wreg free
   625                           
   626                           ;LibLCDXC8.h: 175: RetardoLCD(4);
   627   007FD0  0E04               	movlw	4
   628   007FD2  EC31  F03F         	call	_RetardoLCD
   629                           
   630                           ;LibLCDXC8.h: 176: EnviaDato(unidad+48);
   631   007FD6  500C               	movf	EscribeLCD_n8@unidad^0,w,c
   632   007FD8  0F30               	addlw	48
   633   007FDA  ECA5  F03E         	call	_EnviaDato
   634                           
   635                           ;LibLCDXC8.h: 177: HabilitaLCD();
   636   007FDE  ECA9  F03E         	call	_HabilitaLCD	;wreg free
   637                           
   638                           ;LibLCDXC8.h: 178: RetardoLCD(4);
   639   007FE2  0E04               	movlw	4
   640   007FE4  EC31  F03F         	call	_RetardoLCD
   641                           
   642                           ;LibLCDXC8.h: 179: break;
   643   007FE8  0012               	return	
   644   007FEA                     l1155:
   645   007FEA  5009               	movf	EscribeLCD_n8@b^0,w,c
   646                           
   647                           ; Switch size 1, requested type "simple"
   648                           ; Number of cases is 3, Range of values is 1 to 3
   649                           ; switch strategies available:
   650                           ; Name         Instructions Cycles
   651                           ; simple_byte           10     6 (average)
   652                           ;	Chosen strategy is simple_byte
   653   007FEC  0A01               	xorlw	1	; case 1
   654   007FEE  B4D8               	btfsc	status,2,c
   655   007FF0  D797               	goto	l1123
   656   007FF2  0A03               	xorlw	3	; case 2
   657   007FF4  B4D8               	btfsc	status,2,c
   658   007FF6  D7A4               	goto	l1129
   659   007FF8  0A01               	xorlw	1	; case 3
   660   007FFA  A4D8               	btfss	status,2,c
   661   007FFC  0012               	return	
   662   007FFE  D7C3               	goto	l1139
   663   008000                     __end_of_EscribeLCD_n8:
   664                           	callstack 0
   665                           
   666 ;; *************** function ___lbmod *****************
   667 ;; Defined at:
   668 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lbmod.c"
   669 ;; Parameters:    Size  Location     Type
   670 ;;  dividend        1    wreg     unsigned char 
   671 ;;  divisor         1    0[COMRAM] unsigned char 
   672 ;; Auto vars:     Size  Location     Type
   673 ;;  dividend        1    1[COMRAM] unsigned char 
   674 ;;  rem             1    3[COMRAM] unsigned char 
   675 ;;  counter         1    2[COMRAM] unsigned char 
   676 ;; Return value:  Size  Location     Type
   677 ;;                  1    wreg      unsigned char 
   678 ;; Registers used:
   679 ;;		wreg, status,2, status,0
   680 ;; Tracked objects:
   681 ;;		On entry : 0/0
   682 ;;		On exit  : 0/0
   683 ;;		Unchanged: 0/0
   684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   685 ;;      Params:         1       0       0       0       0       0       0       0       0
   686 ;;      Locals:         3       0       0       0       0       0       0       0       0
   687 ;;      Temps:          0       0       0       0       0       0       0       0       0
   688 ;;      Totals:         4       0       0       0       0       0       0       0       0
   689 ;;Total ram usage:        4 bytes
   690 ;; Hardware stack levels used: 1
   691 ;; This function calls:
   692 ;;		Nothing
   693 ;; This function is called by:
   694 ;;		_EscribeLCD_n8
   695 ;; This function uses a non-reentrant model
   696 ;;
   697                           
   698                           	psect	text4
   699   007DBC                     __ptext4:
   700                           	callstack 0
   701   007DBC                     ___lbmod:
   702                           	callstack 29
   703                           
   704                           ;incstack = 0
   705                           ;___lbmod@dividend stored from wreg
   706   007DBC  6E02               	movwf	___lbmod@dividend^0,c
   707   007DBE  0E08               	movlw	8
   708   007DC0  6E03               	movwf	___lbmod@counter^0,c
   709   007DC2  0E00               	movlw	0
   710   007DC4  6E04               	movwf	___lbmod@rem^0,c
   711   007DC6                     l1107:
   712   007DC6  90D8               	bcf	status,0,c
   713   007DC8  3402               	rlcf	___lbmod@dividend^0,w,c
   714   007DCA  3404               	rlcf	___lbmod@rem^0,w,c
   715   007DCC  6E04               	movwf	___lbmod@rem^0,c
   716   007DCE  90D8               	bcf	status,0,c
   717   007DD0  3602               	rlcf	___lbmod@dividend^0,f,c
   718   007DD2  5001               	movf	___lbmod@divisor^0,w,c
   719   007DD4  5C04               	subwf	___lbmod@rem^0,w,c
   720   007DD6  A0D8               	btfss	status,0,c
   721   007DD8  D002               	goto	l1115
   722   007DDA  5001               	movf	___lbmod@divisor^0,w,c
   723   007DDC  5E04               	subwf	___lbmod@rem^0,f,c
   724   007DDE                     l1115:
   725   007DDE  2E03               	decfsz	___lbmod@counter^0,f,c
   726   007DE0  D7F2               	goto	l1107
   727   007DE2  5004               	movf	___lbmod@rem^0,w,c
   728   007DE4  0012               	return		;funcret
   729   007DE6                     __end_of___lbmod:
   730                           	callstack 0
   731                           
   732 ;; *************** function ___lbdiv *****************
   733 ;; Defined at:
   734 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lbdiv.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;  dividend        1    wreg     unsigned char 
   737 ;;  divisor         1    4[COMRAM] unsigned char 
   738 ;; Auto vars:     Size  Location     Type
   739 ;;  dividend        1    5[COMRAM] unsigned char 
   740 ;;  quotient        1    7[COMRAM] unsigned char 
   741 ;;  counter         1    6[COMRAM] unsigned char 
   742 ;; Return value:  Size  Location     Type
   743 ;;                  1    wreg      unsigned char 
   744 ;; Registers used:
   745 ;;		wreg, status,2, status,0
   746 ;; Tracked objects:
   747 ;;		On entry : 0/0
   748 ;;		On exit  : 0/0
   749 ;;		Unchanged: 0/0
   750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   751 ;;      Params:         1       0       0       0       0       0       0       0       0
   752 ;;      Locals:         3       0       0       0       0       0       0       0       0
   753 ;;      Temps:          0       0       0       0       0       0       0       0       0
   754 ;;      Totals:         4       0       0       0       0       0       0       0       0
   755 ;;Total ram usage:        4 bytes
   756 ;; Hardware stack levels used: 1
   757 ;; This function calls:
   758 ;;		Nothing
   759 ;; This function is called by:
   760 ;;		_EscribeLCD_n8
   761 ;; This function uses a non-reentrant model
   762 ;;
   763                           
   764                           	psect	text5
   765   007DE6                     __ptext5:
   766                           	callstack 0
   767   007DE6                     ___lbdiv:
   768                           	callstack 29
   769                           
   770                           ;incstack = 0
   771                           ;___lbdiv@dividend stored from wreg
   772   007DE6  6E06               	movwf	___lbdiv@dividend^0,c
   773   007DE8  0E00               	movlw	0
   774   007DEA  6E08               	movwf	___lbdiv@quotient^0,c
   775   007DEC  5005               	movf	___lbdiv@divisor^0,w,c
   776   007DEE  B4D8               	btfsc	status,2,c
   777   007DF0  D015               	goto	l1101
   778   007DF2  0E01               	movlw	1
   779   007DF4  6E07               	movwf	___lbdiv@counter^0,c
   780   007DF6  D003               	goto	l1089
   781   007DF8                     l1085:
   782   007DF8  90D8               	bcf	status,0,c
   783   007DFA  3605               	rlcf	___lbdiv@divisor^0,f,c
   784   007DFC  2A07               	incf	___lbdiv@counter^0,f,c
   785   007DFE                     l1089:
   786   007DFE  AE05               	btfss	___lbdiv@divisor^0,7,c
   787   007E00  D7FB               	goto	l1085
   788   007E02                     u60:
   789   007E02  90D8               	bcf	status,0,c
   790   007E04  3608               	rlcf	___lbdiv@quotient^0,f,c
   791   007E06  5005               	movf	___lbdiv@divisor^0,w,c
   792   007E08  5C06               	subwf	___lbdiv@dividend^0,w,c
   793   007E0A  A0D8               	btfss	status,0,c
   794   007E0C  D003               	goto	l1097
   795   007E0E  5005               	movf	___lbdiv@divisor^0,w,c
   796   007E10  5E06               	subwf	___lbdiv@dividend^0,f,c
   797   007E12  8008               	bsf	___lbdiv@quotient^0,0,c
   798   007E14                     l1097:
   799   007E14  90D8               	bcf	status,0,c
   800   007E16  3205               	rrcf	___lbdiv@divisor^0,f,c
   801   007E18  2E07               	decfsz	___lbdiv@counter^0,f,c
   802   007E1A  D7F3               	goto	u60
   803   007E1C                     l1101:
   804   007E1C  5008               	movf	___lbdiv@quotient^0,w,c
   805   007E1E  0012               	return		;funcret
   806   007E20                     __end_of___lbdiv:
   807                           	callstack 0
   808                           
   809 ;; *************** function _EscribeLCD_c *****************
   810 ;; Defined at:
   811 ;;		line 136 in file "LibLCDXC8.h"
   812 ;; Parameters:    Size  Location     Type
   813 ;;  a               1    wreg     unsigned char 
   814 ;; Auto vars:     Size  Location     Type
   815 ;;  a               1    3[COMRAM] unsigned char 
   816 ;; Return value:  Size  Location     Type
   817 ;;                  1    wreg      void 
   818 ;; Registers used:
   819 ;;		wreg, status,2, status,0, cstack
   820 ;; Tracked objects:
   821 ;;		On entry : 0/0
   822 ;;		On exit  : 0/0
   823 ;;		Unchanged: 0/0
   824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   825 ;;      Params:         0       0       0       0       0       0       0       0       0
   826 ;;      Locals:         1       0       0       0       0       0       0       0       0
   827 ;;      Temps:          0       0       0       0       0       0       0       0       0
   828 ;;      Totals:         1       0       0       0       0       0       0       0       0
   829 ;;Total ram usage:        1 bytes
   830 ;; Hardware stack levels used: 1
   831 ;; Hardware stack levels required when called: 2
   832 ;; This function calls:
   833 ;;		_EnviaDato
   834 ;;		_HabilitaLCD
   835 ;;		_RetardoLCD
   836 ;; This function is called by:
   837 ;;		_main
   838 ;; This function uses a non-reentrant model
   839 ;;
   840                           
   841                           	psect	text6
   842   007D8A                     __ptext6:
   843                           	callstack 0
   844   007D8A                     _EscribeLCD_c:
   845                           	callstack 28
   846                           
   847                           ;incstack = 0
   848                           ;EscribeLCD_c@a stored from wreg
   849   007D8A  6E04               	movwf	EscribeLCD_c@a^0,c
   850                           
   851                           ;LibLCDXC8.h: 140: LATE0=1;
   852   007D8C  808D               	bsf	3981,0,c	;volatile
   853                           
   854                           ;LibLCDXC8.h: 141: EnviaDato(a);
   855   007D8E  5004               	movf	EscribeLCD_c@a^0,w,c
   856   007D90  ECA5  F03E         	call	_EnviaDato
   857                           
   858                           ;LibLCDXC8.h: 142: HabilitaLCD();
   859   007D94  ECA9  F03E         	call	_HabilitaLCD	;wreg free
   860                           
   861                           ;LibLCDXC8.h: 143: RetardoLCD(4);
   862   007D98  0E04               	movlw	4
   863   007D9A  EC31  F03F         	call	_RetardoLCD
   864   007D9E  0012               	return		;funcret
   865   007DA0                     __end_of_EscribeLCD_c:
   866                           	callstack 0
   867                           
   868 ;; *************** function _DireccionaLCD *****************
   869 ;; Defined at:
   870 ;;		line 238 in file "LibLCDXC8.h"
   871 ;; Parameters:    Size  Location     Type
   872 ;;  a               1    wreg     unsigned char 
   873 ;; Auto vars:     Size  Location     Type
   874 ;;  a               1    3[COMRAM] unsigned char 
   875 ;; Return value:  Size  Location     Type
   876 ;;                  1    wreg      void 
   877 ;; Registers used:
   878 ;;		wreg, status,2, status,0, cstack
   879 ;; Tracked objects:
   880 ;;		On entry : 0/0
   881 ;;		On exit  : 0/0
   882 ;;		Unchanged: 0/0
   883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   884 ;;      Params:         0       0       0       0       0       0       0       0       0
   885 ;;      Locals:         1       0       0       0       0       0       0       0       0
   886 ;;      Temps:          0       0       0       0       0       0       0       0       0
   887 ;;      Totals:         1       0       0       0       0       0       0       0       0
   888 ;;Total ram usage:        1 bytes
   889 ;; Hardware stack levels used: 1
   890 ;; Hardware stack levels required when called: 2
   891 ;; This function calls:
   892 ;;		_EnviaDato
   893 ;;		_HabilitaLCD
   894 ;;		_RetardoLCD
   895 ;; This function is called by:
   896 ;;		_main
   897 ;; This function uses a non-reentrant model
   898 ;;
   899                           
   900                           	psect	text7
   901   007D74                     __ptext7:
   902                           	callstack 0
   903   007D74                     _DireccionaLCD:
   904                           	callstack 28
   905                           
   906                           ;incstack = 0
   907                           ;DireccionaLCD@a stored from wreg
   908   007D74  6E04               	movwf	DireccionaLCD@a^0,c
   909                           
   910                           ;LibLCDXC8.h: 241: LATE0=0;
   911   007D76  908D               	bcf	3981,0,c	;volatile
   912                           
   913                           ;LibLCDXC8.h: 242: EnviaDato(a);
   914   007D78  5004               	movf	DireccionaLCD@a^0,w,c
   915   007D7A  ECA5  F03E         	call	_EnviaDato
   916                           
   917                           ;LibLCDXC8.h: 243: HabilitaLCD();
   918   007D7E  ECA9  F03E         	call	_HabilitaLCD	;wreg free
   919                           
   920                           ;LibLCDXC8.h: 244: RetardoLCD(4);
   921   007D82  0E04               	movlw	4
   922   007D84  EC31  F03F         	call	_RetardoLCD
   923   007D88  0012               	return		;funcret
   924   007D8A                     __end_of_DireccionaLCD:
   925                           	callstack 0
   926                           
   927 ;; *************** function _EnviaDato *****************
   928 ;; Defined at:
   929 ;;		line 59 in file "LibLCDXC8.h"
   930 ;; Parameters:    Size  Location     Type
   931 ;;  a               1    wreg     unsigned char 
   932 ;; Auto vars:     Size  Location     Type
   933 ;;  a               1    2[COMRAM] unsigned char 
   934 ;; Return value:  Size  Location     Type
   935 ;;                  1    wreg      void 
   936 ;; Registers used:
   937 ;;		wreg
   938 ;; Tracked objects:
   939 ;;		On entry : 0/0
   940 ;;		On exit  : 0/0
   941 ;;		Unchanged: 0/0
   942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   943 ;;      Params:         0       0       0       0       0       0       0       0       0
   944 ;;      Locals:         1       0       0       0       0       0       0       0       0
   945 ;;      Temps:          0       0       0       0       0       0       0       0       0
   946 ;;      Totals:         1       0       0       0       0       0       0       0       0
   947 ;;Total ram usage:        1 bytes
   948 ;; Hardware stack levels used: 1
   949 ;; Hardware stack levels required when called: 1
   950 ;; This function calls:
   951 ;;		_HabilitaLCD
   952 ;;		_RetardoLCD
   953 ;; This function is called by:
   954 ;;		_InicializaLCD
   955 ;;		_BorraLCD
   956 ;;		_EscribeLCD_c
   957 ;;		_EscribeLCD_n8
   958 ;;		_DireccionaLCD
   959 ;; This function uses a non-reentrant model
   960 ;;
   961                           
   962                           	psect	text8
   963   007D4A                     __ptext8:
   964                           	callstack 0
   965   007D4A                     _EnviaDato:
   966                           	callstack 28
   967                           
   968                           ;incstack = 0
   969                           ;EnviaDato@a stored from wreg
   970   007D4A  6E03               	movwf	EnviaDato@a^0,c
   971                           
   972                           ;LibLCDXC8.h: 68: LATD=a;
   973                           
   974                           ;LibLCDXC8.h: 60: if(interfaz==4){
   975   007D4C  C003  FF8C         	movff	EnviaDato@a,3980	;volatile
   976   007D50  0012               	return		;funcret
   977   007D52                     __end_of_EnviaDato:
   978                           	callstack 0
   979                           
   980 ;; *************** function _RetardoLCD *****************
   981 ;; Defined at:
   982 ;;		line 274 in file "LibLCDXC8.h"
   983 ;; Parameters:    Size  Location     Type
   984 ;;  a               1    wreg     unsigned char 
   985 ;; Auto vars:     Size  Location     Type
   986 ;;  a               1    1[COMRAM] unsigned char 
   987 ;; Return value:  Size  Location     Type
   988 ;;                  1    wreg      void 
   989 ;; Registers used:
   990 ;;		wreg, status,2, status,0
   991 ;; Tracked objects:
   992 ;;		On entry : 0/0
   993 ;;		On exit  : 0/0
   994 ;;		Unchanged: 0/0
   995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   996 ;;      Params:         0       0       0       0       0       0       0       0       0
   997 ;;      Locals:         1       0       0       0       0       0       0       0       0
   998 ;;      Temps:          1       0       0       0       0       0       0       0       0
   999 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1000 ;;Total ram usage:        2 bytes
  1001 ;; Hardware stack levels used: 1
  1002 ;; This function calls:
  1003 ;;		Nothing
  1004 ;; This function is called by:
  1005 ;;		_EnviaDato
  1006 ;;		_InicializaLCD
  1007 ;;		_BorraLCD
  1008 ;;		_EscribeLCD_c
  1009 ;;		_EscribeLCD_n8
  1010 ;;		_DireccionaLCD
  1011 ;; This function uses a non-reentrant model
  1012 ;;
  1013                           
  1014                           	psect	text9
  1015   007E62                     __ptext9:
  1016                           	callstack 0
  1017   007E62                     _RetardoLCD:
  1018                           	callstack 29
  1019                           
  1020                           ;incstack = 0
  1021                           ;RetardoLCD@a stored from wreg
  1022   007E62  6E02               	movwf	RetardoLCD@a^0,c
  1023                           
  1024                           ;LibLCDXC8.h: 275: switch(a){
  1025   007E64  D01B               	goto	l891
  1026   007E66                     l881:
  1027   007E66  0E05               	movlw	5
  1028   007E68  6E01               	movwf	??_RetardoLCD^0,c
  1029   007E6A  0EDE               	movlw	222
  1030   007E6C                     u97:
  1031   007E6C  2EE8               	decfsz	wreg,f,c
  1032   007E6E  D7FE               	bra	u97
  1033   007E70  2E01               	decfsz	??_RetardoLCD^0,f,c
  1034   007E72  D7FC               	bra	u97
  1035                           
  1036                           ;LibLCDXC8.h: 278: break;
  1037   007E74  0012               	return	
  1038   007E76                     l883:
  1039   007E76  0E53               	movlw	83
  1040   007E78                     u107:
  1041   007E78  2EE8               	decfsz	wreg,f,c
  1042   007E7A  D7FE               	bra	u107
  1043   007E7C  F000               	nop	
  1044                           
  1045                           ;LibLCDXC8.h: 280: _delay((unsigned long)((640)*(1000000/4000000.0)));
  1046   007E7E  0E35               	movlw	53
  1047   007E80                     u117:
  1048   007E80  2EE8               	decfsz	wreg,f,c
  1049   007E82  D7FE               	bra	u117
  1050   007E84  F000               	nop	
  1051                           
  1052                           ;LibLCDXC8.h: 282: break;
  1053   007E86  0012               	return	
  1054   007E88                     l885:
  1055   007E88  0E08               	movlw	8
  1056   007E8A                     u127:
  1057   007E8A  2EE8               	decfsz	wreg,f,c
  1058   007E8C  D7FE               	bra	u127
  1059   007E8E  F000               	nop	
  1060                           
  1061                           ;LibLCDXC8.h: 285: break;
  1062   007E90  0012               	return	
  1063   007E92                     l887:
  1064   007E92  0E03               	movlw	3
  1065   007E94                     u137:
  1066   007E94  2EE8               	decfsz	wreg,f,c
  1067   007E96  D7FE               	bra	u137
  1068   007E98  F000               	nop	
  1069                           
  1070                           ;LibLCDXC8.h: 288: break;
  1071   007E9A  0012               	return	
  1072   007E9C                     l891:
  1073   007E9C  5002               	movf	RetardoLCD@a^0,w,c
  1074                           
  1075                           ; Switch size 1, requested type "simple"
  1076                           ; Number of cases is 4, Range of values is 1 to 4
  1077                           ; switch strategies available:
  1078                           ; Name         Instructions Cycles
  1079                           ; simple_byte           13     7 (average)
  1080                           ;	Chosen strategy is simple_byte
  1081   007E9E  0A01               	xorlw	1	; case 1
  1082   007EA0  B4D8               	btfsc	status,2,c
  1083   007EA2  D7E1               	goto	l881
  1084   007EA4  0A03               	xorlw	3	; case 2
  1085   007EA6  B4D8               	btfsc	status,2,c
  1086   007EA8  D7E6               	goto	l883
  1087   007EAA  0A01               	xorlw	1	; case 3
  1088   007EAC  B4D8               	btfsc	status,2,c
  1089   007EAE  D7EC               	goto	l885
  1090   007EB0  0A07               	xorlw	7	; case 4
  1091   007EB2  A4D8               	btfss	status,2,c
  1092   007EB4  0012               	return	
  1093   007EB6  D7ED               	goto	l887
  1094   007EB8                     __end_of_RetardoLCD:
  1095                           	callstack 0
  1096                           
  1097 ;; *************** function _HabilitaLCD *****************
  1098 ;; Defined at:
  1099 ;;		line 105 in file "LibLCDXC8.h"
  1100 ;; Parameters:    Size  Location     Type
  1101 ;;		None
  1102 ;; Auto vars:     Size  Location     Type
  1103 ;;		None
  1104 ;; Return value:  Size  Location     Type
  1105 ;;                  1    wreg      void 
  1106 ;; Registers used:
  1107 ;;		wreg
  1108 ;; Tracked objects:
  1109 ;;		On entry : 0/0
  1110 ;;		On exit  : 0/0
  1111 ;;		Unchanged: 0/0
  1112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1113 ;;      Params:         0       0       0       0       0       0       0       0       0
  1114 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1115 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1116 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1117 ;;Total ram usage:        0 bytes
  1118 ;; Hardware stack levels used: 1
  1119 ;; This function calls:
  1120 ;;		Nothing
  1121 ;; This function is called by:
  1122 ;;		_EnviaDato
  1123 ;;		_InicializaLCD
  1124 ;;		_BorraLCD
  1125 ;;		_EscribeLCD_c
  1126 ;;		_EscribeLCD_n8
  1127 ;;		_DireccionaLCD
  1128 ;; This function uses a non-reentrant model
  1129 ;;
  1130                           
  1131                           	psect	text10
  1132   007D52                     __ptext10:
  1133                           	callstack 0
  1134   007D52                     _HabilitaLCD:
  1135                           	callstack 29
  1136                           
  1137                           ;LibLCDXC8.h: 107: LATE1=1;
  1138                           
  1139                           ;incstack = 0
  1140   007D52  828D               	bsf	3981,1,c	;volatile
  1141                           
  1142                           ;LibLCDXC8.h: 108: _delay((unsigned long)((40)*(1000000/4000000.0)));
  1143   007D54  0E03               	movlw	3
  1144   007D56                     u147:
  1145   007D56  2EE8               	decfsz	wreg,f,c
  1146   007D58  D7FE               	bra	u147
  1147   007D5A  F000               	nop	
  1148                           
  1149                           ;LibLCDXC8.h: 110: LATE1=0;
  1150   007D5C  928D               	bcf	3981,1,c	;volatile
  1151   007D5E  0012               	return		;funcret
  1152   007D60                     __end_of_HabilitaLCD:
  1153                           	callstack 0
  1154   000000                     
  1155                           	psect	rparam
  1156   000000                     
  1157                           	psect	idloc
  1158                           
  1159                           ;Config register IDLOC0 @ 0x200000
  1160                           ;	unspecified, using default values
  1161   200000                     	org	2097152
  1162   200000  FF                 	db	255
  1163                           
  1164                           ;Config register IDLOC1 @ 0x200001
  1165                           ;	unspecified, using default values
  1166   200001                     	org	2097153
  1167   200001  FF                 	db	255
  1168                           
  1169                           ;Config register IDLOC2 @ 0x200002
  1170                           ;	unspecified, using default values
  1171   200002                     	org	2097154
  1172   200002  FF                 	db	255
  1173                           
  1174                           ;Config register IDLOC3 @ 0x200003
  1175                           ;	unspecified, using default values
  1176   200003                     	org	2097155
  1177   200003  FF                 	db	255
  1178                           
  1179                           ;Config register IDLOC4 @ 0x200004
  1180                           ;	unspecified, using default values
  1181   200004                     	org	2097156
  1182   200004  FF                 	db	255
  1183                           
  1184                           ;Config register IDLOC5 @ 0x200005
  1185                           ;	unspecified, using default values
  1186   200005                     	org	2097157
  1187   200005  FF                 	db	255
  1188                           
  1189                           ;Config register IDLOC6 @ 0x200006
  1190                           ;	unspecified, using default values
  1191   200006                     	org	2097158
  1192   200006  FF                 	db	255
  1193                           
  1194                           ;Config register IDLOC7 @ 0x200007
  1195                           ;	unspecified, using default values
  1196   200007                     	org	2097159
  1197   200007  FF                 	db	255
  1198                           
  1199                           	psect	config
  1200                           
  1201                           ;Config register CONFIG1L @ 0x300000
  1202                           ;	unspecified, using default values
  1203                           ;	PLL Prescaler Selection bits
  1204                           ;	PLLDIV = 0x0, unprogrammed default
  1205                           ;	System Clock Postscaler Selection bits
  1206                           ;	CPUDIV = 0x0, unprogrammed default
  1207                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1208                           ;	USBDIV = 0x0, unprogrammed default
  1209   300000                     	org	3145728
  1210   300000  00                 	db	0
  1211                           
  1212                           ;Config register CONFIG1H @ 0x300001
  1213                           ;	Oscillator Selection bits
  1214                           ;	FOSC = INTOSC_EC, Internal oscillator, CLKO function on RA6, EC used by USB (INTCKO)
  1215                           ;	Fail-Safe Clock Monitor Enable bit
  1216                           ;	FCMEN = 0x0, unprogrammed default
  1217                           ;	Internal/External Oscillator Switchover bit
  1218                           ;	IESO = 0x0, unprogrammed default
  1219   300001                     	org	3145729
  1220   300001  09                 	db	9
  1221                           
  1222                           ;Config register CONFIG2L @ 0x300002
  1223                           ;	unspecified, using default values
  1224                           ;	Power-up Timer Enable bit
  1225                           ;	PWRT = 0x1, unprogrammed default
  1226                           ;	Brown-out Reset Enable bits
  1227                           ;	BOR = 0x3, unprogrammed default
  1228                           ;	Brown-out Reset Voltage bits
  1229                           ;	BORV = 0x3, unprogrammed default
  1230                           ;	USB Voltage Regulator Enable bit
  1231                           ;	VREGEN = 0x0, unprogrammed default
  1232   300002                     	org	3145730
  1233   300002  1F                 	db	31
  1234                           
  1235                           ;Config register CONFIG2H @ 0x300003
  1236                           ;	Watchdog Timer Enable bit
  1237                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1238                           ;	Watchdog Timer Postscale Select bits
  1239                           ;	WDTPS = 0xF, unprogrammed default
  1240   300003                     	org	3145731
  1241   300003  1E                 	db	30
  1242                           
  1243                           ; Padding undefined space
  1244   300004                     	org	3145732
  1245   300004  FF                 	db	255
  1246                           
  1247                           ;Config register CONFIG3H @ 0x300005
  1248                           ;	unspecified, using default values
  1249                           ;	CCP2 MUX bit
  1250                           ;	CCP2MX = 0x1, unprogrammed default
  1251                           ;	PORTB A/D Enable bit
  1252                           ;	PBADEN = 0x1, unprogrammed default
  1253                           ;	Low-Power Timer 1 Oscillator Enable bit
  1254                           ;	LPT1OSC = 0x0, unprogrammed default
  1255                           ;	MCLR Pin Enable bit
  1256                           ;	MCLRE = 0x1, unprogrammed default
  1257   300005                     	org	3145733
  1258   300005  83                 	db	131
  1259                           
  1260                           ;Config register CONFIG4L @ 0x300006
  1261                           ;	unspecified, using default values
  1262                           ;	Stack Full/Underflow Reset Enable bit
  1263                           ;	STVREN = 0x1, unprogrammed default
  1264                           ;	Single-Supply ICSP Enable bit
  1265                           ;	LVP = 0x1, unprogrammed default
  1266                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1267                           ;	ICPRT = 0x0, unprogrammed default
  1268                           ;	Extended Instruction Set Enable bit
  1269                           ;	XINST = 0x0, unprogrammed default
  1270                           ;	Background Debugger Enable bit
  1271                           ;	DEBUG = 0x1, unprogrammed default
  1272   300006                     	org	3145734
  1273   300006  85                 	db	133
  1274                           
  1275                           ; Padding undefined space
  1276   300007                     	org	3145735
  1277   300007  FF                 	db	255
  1278                           
  1279                           ;Config register CONFIG5L @ 0x300008
  1280                           ;	unspecified, using default values
  1281                           ;	Code Protection bit
  1282                           ;	CP0 = 0x1, unprogrammed default
  1283                           ;	Code Protection bit
  1284                           ;	CP1 = 0x1, unprogrammed default
  1285                           ;	Code Protection bit
  1286                           ;	CP2 = 0x1, unprogrammed default
  1287                           ;	Code Protection bit
  1288                           ;	CP3 = 0x1, unprogrammed default
  1289   300008                     	org	3145736
  1290   300008  0F                 	db	15
  1291                           
  1292                           ;Config register CONFIG5H @ 0x300009
  1293                           ;	unspecified, using default values
  1294                           ;	Boot Block Code Protection bit
  1295                           ;	CPB = 0x1, unprogrammed default
  1296                           ;	Data EEPROM Code Protection bit
  1297                           ;	CPD = 0x1, unprogrammed default
  1298   300009                     	org	3145737
  1299   300009  C0                 	db	192
  1300                           
  1301                           ;Config register CONFIG6L @ 0x30000A
  1302                           ;	unspecified, using default values
  1303                           ;	Write Protection bit
  1304                           ;	WRT0 = 0x1, unprogrammed default
  1305                           ;	Write Protection bit
  1306                           ;	WRT1 = 0x1, unprogrammed default
  1307                           ;	Write Protection bit
  1308                           ;	WRT2 = 0x1, unprogrammed default
  1309                           ;	Write Protection bit
  1310                           ;	WRT3 = 0x1, unprogrammed default
  1311   30000A                     	org	3145738
  1312   30000A  0F                 	db	15
  1313                           
  1314                           ;Config register CONFIG6H @ 0x30000B
  1315                           ;	unspecified, using default values
  1316                           ;	Configuration Register Write Protection bit
  1317                           ;	WRTC = 0x1, unprogrammed default
  1318                           ;	Boot Block Write Protection bit
  1319                           ;	WRTB = 0x1, unprogrammed default
  1320                           ;	Data EEPROM Write Protection bit
  1321                           ;	WRTD = 0x1, unprogrammed default
  1322   30000B                     	org	3145739
  1323   30000B  E0                 	db	224
  1324                           
  1325                           ;Config register CONFIG7L @ 0x30000C
  1326                           ;	unspecified, using default values
  1327                           ;	Table Read Protection bit
  1328                           ;	EBTR0 = 0x1, unprogrammed default
  1329                           ;	Table Read Protection bit
  1330                           ;	EBTR1 = 0x1, unprogrammed default
  1331                           ;	Table Read Protection bit
  1332                           ;	EBTR2 = 0x1, unprogrammed default
  1333                           ;	Table Read Protection bit
  1334                           ;	EBTR3 = 0x1, unprogrammed default
  1335   30000C                     	org	3145740
  1336   30000C  0F                 	db	15
  1337                           
  1338                           ;Config register CONFIG7H @ 0x30000D
  1339                           ;	unspecified, using default values
  1340                           ;	Boot Block Table Read Protection bit
  1341                           ;	EBTRB = 0x1, unprogrammed default
  1342   30000D                     	org	3145741
  1343   30000D  40                 	db	64
  1344                           tosu	equ	0xFFF
  1345                           tosh	equ	0xFFE
  1346                           tosl	equ	0xFFD
  1347                           stkptr	equ	0xFFC
  1348                           pclatu	equ	0xFFB
  1349                           pclath	equ	0xFFA
  1350                           pcl	equ	0xFF9
  1351                           tblptru	equ	0xFF8
  1352                           tblptrh	equ	0xFF7
  1353                           tblptrl	equ	0xFF6
  1354                           tablat	equ	0xFF5
  1355                           prodh	equ	0xFF4
  1356                           prodl	equ	0xFF3
  1357                           indf0	equ	0xFEF
  1358                           postinc0	equ	0xFEE
  1359                           postdec0	equ	0xFED
  1360                           preinc0	equ	0xFEC
  1361                           plusw0	equ	0xFEB
  1362                           fsr0h	equ	0xFEA
  1363                           fsr0l	equ	0xFE9
  1364                           wreg	equ	0xFE8
  1365                           indf1	equ	0xFE7
  1366                           postinc1	equ	0xFE6
  1367                           postdec1	equ	0xFE5
  1368                           preinc1	equ	0xFE4
  1369                           plusw1	equ	0xFE3
  1370                           fsr1h	equ	0xFE2
  1371                           fsr1l	equ	0xFE1
  1372                           bsr	equ	0xFE0
  1373                           indf2	equ	0xFDF
  1374                           postinc2	equ	0xFDE
  1375                           postdec2	equ	0xFDD
  1376                           preinc2	equ	0xFDC
  1377                           plusw2	equ	0xFDB
  1378                           fsr2h	equ	0xFDA
  1379                           fsr2l	equ	0xFD9
  1380                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     13      14
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_EscribeLCD_n8
    _InicializaLCD->_EnviaDato
    _BorraLCD->_EnviaDato
    _EscribeLCD_n8->___lbdiv
    ___lbdiv->___lbmod
    _EscribeLCD_c->_EnviaDato
    _DireccionaLCD->_EnviaDato
    _EnviaDato->_RetardoLCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1777
                           _BorraLCD
                      _DireccionaLCD
                       _EscribeLCD_c
                      _EscribeLCD_n8
                      _InicializaLCD
 ---------------------------------------------------------------------------------
 (1) _InicializaLCD                                        0     0      0     150
                           _BorraLCD
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (2) _BorraLCD                                             0     0      0      75
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (1) _EscribeLCD_n8                                        5     4      1    1372
                                              8 COMRAM     5     4      1
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     539
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     390
                                              4 COMRAM     4     3      1
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _EscribeLCD_c                                         1     1      0      90
                                              3 COMRAM     1     1      0
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (1) _DireccionaLCD                                        1     1      0      90
                                              3 COMRAM     1     1      0
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (2) _EnviaDato                                            1     1      0      60
                                              2 COMRAM     1     1      0
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (2) _RetardoLCD                                           2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _HabilitaLCD                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BorraLCD
     _EnviaDato
       _HabilitaLCD
       _RetardoLCD
     _HabilitaLCD
     _RetardoLCD
   _DireccionaLCD
     _EnviaDato
     _HabilitaLCD
     _RetardoLCD
   _EscribeLCD_c
     _EnviaDato
     _HabilitaLCD
     _RetardoLCD
   _EscribeLCD_n8
     _EnviaDato
     _HabilitaLCD
     _RetardoLCD
     ___lbdiv
       ___lbmod (ARG)
     ___lbmod
   _InicializaLCD
     _BorraLCD
     _EnviaDato
     _HabilitaLCD
     _RetardoLCD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      25        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      D       E       1       14.7%
BITBIGSFRhh         3E      0       0      20        0.0%
BITBIGSFRl          2C      0       0      23        0.0%
BITBIGSFRhlh        2A      0       0      21        0.0%
BITBIGSFRhll         7      0       0      22        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       E      24        0.0%
DATA                 0      0       E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri May 12 14:32:50 2023

                     u60 7E02                       u97 7E6C               EnviaDato@a 0003  
                    l122 7F18            _InicializaLCD 7E20                      l881 7E66  
                    l883 7E76                      l891 7E9C                      l885 7E88  
                    l887 7E92                      u107 7E78                      u117 7E80  
                    u127 7E8A                      u137 7E94                      u147 7D56  
                    wreg 000FE8                     l1101 7E1C                     l1115 7DDE  
                   l1107 7DC6                     l1123 7F20                     l1129 7F40  
                   l1139 7F86                     l1155 7FEA                     l1085 7DF8  
                   l1097 7E14                     l1089 7DFE                     _LATD 000F8C  
         ??_EscribeLCD_c 0004                     _main 7EB8                     start 0000  
           ___param_bank 000000           ?_InicializaLCD 0001                    ?_main 0001  
        __end_of___lbdiv 7E20            EscribeLCD_c@a 0004          __end_of___lbmod 7DE6  
                  _LATE0 007C68                    _LATE1 007C69                    _TRISD 000F95  
                  _TRISE 000F96          ??_EscribeLCD_n8 000A                    tablat 000FF5  
            _HabilitaLCD 7D52                    status 000FD8          ___lbdiv@divisor 0005  
        ___lbdiv@counter 0007         __end_of_BorraLCD 7D74          __initialization 7DA0  
           __end_of_main 7F1A                   ??_main 000E            __activetblptr 000002  
                 _ADCON1 000FC1           DireccionaLCD@a 0004           EscribeLCD_n8@a 000D  
         EscribeLCD_n8@b 0009    __end_of_DireccionaLCD 7D8A               _RetardoLCD 7E62  
   EscribeLCD_n8@centena 000A                ??___lbdiv 0006                ??___lbmod 0002  
        ??_InicializaLCD 0004                   isa$std 000001     __end_of_EscribeLCD_c 7DA0  
           __pdataCOMRAM 000E                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8         ___lbdiv@dividend 0006          ___lbmod@divisor 0001  
             __accesstop 0060  __end_of__initialization 7DB2          ___lbmod@counter 0003  
          ___rparam_used 000001           __pcstackCOMRAM 0001        __end_of_EnviaDato 7D52  
       ___lbdiv@quotient 0008                ?_BorraLCD 0001              ?_RetardoLCD 0001  
            RetardoLCD@a 0002               ??_BorraLCD 0004             ?_HabilitaLCD 0001  
                __Hparam 0000                  __Lparam 0000                  ___lbdiv 7DE6  
                ___lbmod 7DBC                  __pcinit 7DA0                  __ramtop 0800  
                __ptext0 7EB8                  __ptext1 7E20                  __ptext2 7D60  
                __ptext3 7F1A                  __ptext4 7DBC                  __ptext5 7DE6  
                __ptext6 7D8A                  __ptext7 7D74                  __ptext8 7D4A  
                __ptext9 7E62    __end_of_EscribeLCD_n8 8000     end_of_initialization 7DB2  
          __Lmediumconst 0000             _EscribeLCD_c 7D8A         ___lbmod@dividend 0002  
            ___lbmod@rem 0004            __pidataCOMRAM 7D49    __end_of_InicializaLCD 7E62  
              _EnviaDato 7D4A      start_initialization 7DA0             ??_RetardoLCD 0001  
    EscribeLCD_n8@decena 000B      EscribeLCD_n8@unidad 000C               ?_EnviaDato 0001  
     __end_of_RetardoLCD 7EB8            _DireccionaLCD 7D74                 ?___lbdiv 0005  
               ?___lbmod 0001           ?_DireccionaLCD 0001              ??_EnviaDato 0003  
               _BorraLCD 7D60                 __Hrparam 0000                 __Lrparam 0000  
               __ptext10 7D52          ??_DireccionaLCD 0004                 _interfaz 000E  
               isa$xinst 000000            _EscribeLCD_n8 7F1A            ??_HabilitaLCD 0001  
         ?_EscribeLCD_n8 0009            ?_EscribeLCD_c 0001      __end_of_HabilitaLCD 7D60  
